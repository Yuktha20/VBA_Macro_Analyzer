VBA Macro Analysis
==================

Functions and Subroutines:

Variables:
- Dim cell As Range
- Dim pos As Integer
- Dim formula As String
- Dim cell As Range
- Dim pos1 As Integer
- Dim pos2 As Integer
- Dim formula As String
- Dim openBracketCount As Integer
- Dim fLen As Integer
- Dim tPos As Integer
- Dim temp1 As Integer

Logic Flow:
- Attribute VB_Name = "Module1"
- Option Explicit
- Public Const paramSeparator = ","
- 
- 'Please note: These macros do not check for IFERROR and ISERROR recursively
- 'Please note: these macros fail when your formulas has paramSeperator in double quotes.
- 'ie =IFERROR(VLOOKUP("where,is"....),"Error") would fail as the lookup text has a comma
- 'Keep a backup of your data / files to avoid loosing your formulas
- 
- Sub iferror2iserror()
- 'this macro checks the selected cells for IFERROR formulas and converts them to ISERROR formulas
- 'If you wish to do the reverse, just run this macro from last line to first
- 'Of course I am kidding, just use iserror2iferror() instead!
- 
- 'How it works:
- 'We take a formula like =IFERROR(expression,error) and convert it to =IF(ISERROR(expression),error,expression)
- 
- On Error GoTo eh
- 
- For Each cell In Selection
- With cell
- If .HasFormula Then
- If formula Like "=IFERROR*" Then
- 'MsgBox (formula)
- .formula = formula
- End If
- End If
- End With
- Next cell
- Selection.Calculate
- eh:
- 'do nothing and exit sub
- End Sub
- Sub iserror2iferror()
- 'this macro checks the selected cells for ISERROR formulas and converts them to IFERROR formulas
- 'If you wish to do the reverse, just run this macro from last line to first
- 'Of course I am kidding, just use iferror2iserror() instead!
- 
- 'How it works:
- 'We take a formula like  =IF(ISERROR(expression),error,expression) and convert it to =IFERROR(expression,error)
- 
- On Error GoTo eh
- 
- For Each cell In Selection
- With cell
- If .HasFormula Then
- If formula Like "=IF(ISERROR*" Then
- 'MsgBox (formula)
- .formula = formula
- End If
- End If
- End With
- Next cell
- Selection.Calculate
- eh:
- 'do nothing and exit sub
- 
- End Sub
- 
- Function whereIsSeparator(inThisFormula As String) As Integer
- 'returns the position of paramSeparator inThisFormula by parsing it.
- 
- 
- 
- For temp1 = 1 To fLen
- If Mid(inThisFormula, temp1, 1) = paramSeparator And openBracketCount = 0 Then
- 'we got a winner.
- Exit For
- End If
- If Mid(inThisFormula, temp1, 1) = "(" Then
- ElseIf Mid(inThisFormula, temp1, 1) = ")" Then
- Else
- 'do nothing
- End If
- Next temp1
- End Function

Data Flow:
- formula = .formula
- pos = whereIsSeparator(Mid(.formula, 10)) + 10
- formula = "=IF(ISERROR(" & Mid(formula, 10, pos - 11) & ")" & paramSeparator & Mid(formula, pos, Len(formula) - pos) & paramSeparator & Mid(formula, 10, pos - 11) & ")"
- formula = .formula
- pos1 = whereIsSeparator(Mid(.formula, 12)) + 12
- pos2 = whereIsSeparator(Mid(.formula, pos1 + 1)) + pos1 + 1
- formula = "=IFERROR(" & Mid(formula, pos2, Len(formula) - pos2) & paramSeparator & Mid(formula, pos1, pos2 - pos1 - 1) & ")"
- openBracketCount = 0
- fLen = Len(inThisFormula)
- tPos = 0
- tPos = temp1
- openBracketCount = openBracketCount + 1
- openBracketCount = openBracketCount - 1
- whereIsSeparator = tPos
